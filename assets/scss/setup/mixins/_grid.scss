// sass-lint:disable-all

// Turn a container into a grid css element based on the grid specificiations.
@mixin grid($has-gap-column: true, $use-grid-cols: true) {
  @include grid-row-gap(var(--spacing-tiny));
  display: -ms-grid;
  display: grid;
  margin-left: auto;
  margin-right: auto;
  // max-width: $max-width;

  @include breakpoint('small') {
    @if ($use-grid-cols) {
      @include grid-columns(grid-repeat(map-get($column-count, small), 1fr));
    }

    @if ($has-gap-column) {
      @include grid-column-gap(map-get($inner-gutters, small));
    }
  }

  @include breakpoint('medium') {
    @if ($use-grid-cols) {
      @include grid-columns(grid-repeat(map-get($column-count, medium), 1fr));
    }

    @if ($has-gap-column) {
      @include grid-column-gap(map-get($inner-gutters, medium));
    }
  }

  @include breakpoint('large') {
    @if ($use-grid-cols) {
      @include grid-columns(grid-repeat(map-get($column-count, large), 1fr));
    }

    @if ($has-gap-column) {
      @include grid-column-gap(map-get($inner-gutters, large));
    }
  }

  @include breakpoint('xlarge') {
    @if ($use-grid-cols) {
      @include grid-columns(grid-repeat(map-get($column-count, xlarge), 1fr));
    }

    @if ($has-gap-column) {
      @include grid-column-gap(map-get($inner-gutters, xlarge));
    }
  }

  @include breakpoint('xxlarge') {
    @if ($use-grid-cols) {
      @include grid-columns(grid-repeat(map-get($column-count, xxlarge), 1fr));
    }

    @if ($has-gap-column) {
      @include grid-column-gap(map-get($inner-gutters, xxlarge));
    }
  }
}


// Define the number of cols to have on the container. If you use the @grid
// mixin on a container, it's already setup to match the number of cols
// inside the grid.
// You can use this one in combinaison with the grid-repeat mixin.
@mixin grid-columns($columns...) {
  -ms-grid-columns: $columns;
  grid-template-columns: $columns;
}


// This one is here to support IE11 because repeat() synthax is not supported.
@function grid-repeat($repeat, $fraction: 1fr) {
  $list: ();
  @for $i from 1 through $repeat {
    $list: append($list, $fraction, space);
  }
  @return $list;
}


// Define gap between column inside the CSS grid (already added if you add the
// grid mixin on a container, the column gap will match the Grid System).
@mixin grid-column-gap($gap) {
  grid-column-gap: $gap;
  column-gap: $gap;
}


// Define gap between row inside the CSS grid.
@mixin grid-row-gap($gap) {
  grid-row-gap: $gap;
  row-gap: $gap;
}


// For grid child items, you can define the number of cols each item needs
// to take. Start with the col position you want to start and pass the number
// of cols you want your element to take.
@mixin grid-column($col-start, $nb-col) {
  -ms-grid-column: $col-start;
  -ms-grid-column-span: $nb-col;
  grid-column: #{$col-start} / span #{$nb-col};
}


// Use this mixin to defined the starting position for the child.
@mixin grid-column-start($col-start) {
  grid-column-start: $col-start;
}


// Use this mixin to defined a width for a child element inside a CSS grid.
@mixin grid-column-end($nb-col) {
  grid-column-end: span $nb-col;
}

// sass-lint:enable-all
