// ####################################################
// Font setup mixins
//
// Use the serif/sans-serif mixins directly in the SCSS do any responsive overwrites - see setup/_typography.scss
// See
// * https://codepen.io/13twelve/pen/WYgrYE?editors=1000
// * https://code.area17.com/a17/fe-boilerplate/wikis/scss-setup-typography
// * https://code.area17.com/a17/fe-boilerplate/wikis/scss-setup-mixins-typography

@function get-primary-font-name($font) {
  // check for a font family rather than a single font name
  $font-family-comma-index: str-index("#{$font}", ',');
  @if $font-family-comma-index {
    // get the primary font from the font family
    $font: str-slice(#{$font}, 0, $font-family-comma-index - 1);
    $font: str-replace($font, '"', '');
  }
  @return $font;
}

@function calc-pull($font, $font-size, $line-height, $push) {
  @if map-has-key($cap-heights, $font) {
    // adjust cap height for this font size
    $cap-height: $font-size * map-get($cap-heights, $font);
    // check push isn't null
    @if ($push == null) {
      $push: 0;
    }
    // calc the push/pull
    @return round((($line-height - $cap-height) / 2) + $push);
  } @else {
    @warn "Unknown font `#{$font}` in $cap-heights.";
    @return 0;
  }
}

@function generate-font-obj($obj) {
  $_obj: ();
  $_settings: ();

  @each $key, $value in $obj {
    @if ($key != 'settings') {
      $_obj: map-merge($_obj, ($key: $value));
    }
  }

  $font-family: map-get($obj, font-family);
  $font-family-loaded: map-get($obj, font-family-loaded);
  $settings: map-get($obj, settings);
  // work out the font string to use
  $font: if($font-family-loaded, $font-family-loaded, $font-family);
  // work out the primary font name (used in the cap heights map)
  $font-name: get-primary-font-name($font);
  // ok if we have settings
  @if $settings {
    // set some defaults, we we can keep track of changes so tuck calc doesn't get null values
    $font-size: 0;
    $line-height: 0;
    $push: 0;
    @each $breakpoint, $font-info in $settings {
      // get font info for this breakpoint
      @if map-has-key($font-info, font-size) {
        // conditional here because this can inherit from earlier items in the map so that the tuck calculation can take place
        $font-size: map-get($font-info, font-size);
      }
      @if map-has-key($font-info, line-height) {
        $line-height: map-get($font-info, line-height);
      }
      @if map-has-key($font-info, push) {
        $push: map-get($font-info, push);
      }
      // calc pull
      $tuck-pull: calc-pull($font-name, $font-size, $line-height, $push);
      // calc tuck-amount
      $tuck-push: $tuck-pull;
      $tuck-push: $tuck-pull % $base-height;
      // update
      $font-info: map-merge($font-info, (tuck-pull: $tuck-pull));
      $font-info: map-merge($font-info, (tuck-push: $tuck-push));
      $_settings: map-merge($_settings, (#{$breakpoint}: $font-info));
    }
  }
  //
  $_obj: map-merge($_obj, (settings: $_settings));
  @return $_obj;
}

// This assumes that the font is vertically centered within the box so may require some tweaking
// https://codepen.io/13twelve/pen/PJgqBN?editors=0100
@mixin untuck($tuck-method: 'pseudo') {
  @if ($tuck-method == null or $tuck-method == 'pseudo') {
    &::before,
    &::after {
      content: none;
    }
  }
  @if ($tuck-method == 'padding') {
    margin-bottom: 0;
    padding-top: 0;
  }
}

@mixin tuck($tuck-method: 'pseudo', $pre-tucked: false, $tuck-push: 0, $tuck-pull: 0) {
  @if ($tuck-push == null) {
    $tuck-push: 0;
  }
  @if ($tuck-pull == null) {
    $tuck-pull: 0;
  }
  // if the tuck method is using pseudo blocks
  @if ($tuck-method == null or $tuck-method == 'pseudo') {
    // add the psuedo-block if required
    @if ($pre-tucked == false) {
      &::before,
      &::after {
        content: '';
        display: block;
      }
    }
    // set the push/pull tucks
    &::before {
      padding-top: $tuck-push * 1px;
    }
    &::after {
      margin-bottom: - $tuck-pull * 1px;
    }
  }
  // if the tuck method is padding-top/margin-bottom
  @if ($tuck-method == 'padding') {
    padding-top: $tuck-push * 1px;
    margin-bottom: - $tuck-pull * 1px;
  }
}

@mixin font-style($font-size: false, $line-height: false, $font-weight: false, $font-style: false, $letter-spacing: false, $text-transform: false, $tuck: false, $pre-tucked: false, $tuck-method: 'pseudo', $tuck-push: 0, $tuck-pull: 0) {
  // set font settings
  @if $font-size {
    font-size: rem-calc($font-size);
  }
  @if $line-height {
    line-height: rem-calc($line-height);
  }
  @if $font-weight {
    font-weight: $font-weight;
  }
  @if $font-style {
    font-style: $font-style;
  }
  @if $letter-spacing {
    letter-spacing: $letter-spacing;
  }
  @if $text-transform {
    text-transform: $text-transform;
  }
  // is tuck required?
  @if $font-size and $line-height and $tuck {
    @if ($font-size < 1) {
      @warn "Did you intend to set a font size of 0? Perhaps no font size has been defined in the font info object?";
    }
    @if ($line-height < 1) {
      @warn "Did you intend to set a line-height of 0? Perhaps no line-height has been defined in the font info object?";
    }
    @include tuck($tuck-method, $pre-tucked, $tuck-push, $tuck-pull);
  }
}

@mixin font-styles($obj,$bolderWeight: false) {
  $font-family: map-get($obj, font-family);
  $font-family-loaded: map-get($obj, font-family-loaded);
  $font-loaded-class: map-get($obj, font-loaded-class);
  $settings: map-get($obj, settings);
  // set base font family
  @if $font-family {
    font-family: $font-family;
  } @else {
    @warn "No fall back font family specified.";
  }
  @if $bolderWeight {
    b,
    strong {
      font-weight: $bolderWeight;
    }
  } @else {
    b,
    strong {
      font-weight: 600;
    }
  }
  i,
  em {
    font-style: italic;
  }
  // set font family when font loaded class, if exists
  @if $font-family-loaded and $font-loaded-class {
    .#{$font-loaded-class} & {
      font-family: $font-family-loaded;
    }
  }
  // set the various font info per breakpoint
  @if $settings and $font-family {
    $font-size: 0;
    $line-height: 0;
    $untuck: false;
    $tuck-method: null;
    // loop the breakpoints in the setttings
    @each $breakpoint, $font-info in $settings {
      // check this is a valid breakpoint
      @if map-has-key($breakpoints-with-directions, $breakpoint) {
        // get font info for this breakpoint
        @if map-has-key($font-info, font-size) {
          // conditional here because this can inherit from earlier items in the map so that the tuck calculation can take place
          $font-size: map-get($font-info, font-size);
        }
        @if map-has-key($font-info, line-height) {
          $line-height: map-get($font-info, line-height);
        }
        $font-weight: map-get($font-info, font-weight);
        $font-style: map-get($font-info, font-style);
        $letter-spacing: map-get($font-info, letter-spacing);
        $text-transform: map-get($font-info, text-transform);
        $tuck-push: map-get($font-info, tuck-push);
        $tuck-pull: map-get($font-info, tuck-pull);

        @if map-has-key($font-info, tuck-method) {
          // check if the new tuck method differs from the last
          $untuck: if(($tuck-method and $tuck-method != map-get($font-info, tuck-method)), $tuck-method, false);
          // set the new tuck method
          $tuck-method: map-get($font-info, tuck-method);
        } @else {
          // set old tuck method or default if no old tuck method
          $tuck-method: if($tuck-method, $tuck-method, 'pseudo');
        }
        // check if this is the smallest breakpoint (the default font setting)
        @if (index(map-keys($settings), $breakpoint) == 1) {
          @include font-style($font-size, $line-height, $font-weight, $font-style, $letter-spacing, $text-transform, true, false, $tuck-method, $tuck-push, $tuck-pull);
        } @else {
          @include breakpoint(#{$breakpoint}) {
            $pre-tucked: true;
            @if $untuck {
              @include untuck($untuck);
              $pre-tucked: false;
            }
            @include font-style($font-size, $line-height, $font-weight, $font-style, $letter-spacing, $text-transform, true, $pre-tucked, $tuck-method, $tuck-push, $tuck-pull);
          }
        }
      } @else {
        @warn "Setting font info to unknown breakpoint: `#{$breakpoint}`";
      }
    }
  } @else {
    @warn "No font settings specified.";
  }
}


@mixin convert-psuedo-push-to-padding($obj) {
  @if map-has-key($obj, settings) {
    $settings: map-get($obj, settings);

    @include untuck();
    // loop the breakpoints in the setttings
    @each $breakpoint, $font-info in $settings {
      // check this is a valid breakpoint
      @if map-has-key($breakpoints-with-directions, $breakpoint) {
        $tuck-push: map-get($font-info, tuck-push);
        $tuck-pull: map-get($font-info, tuck-pull);

        // check if this is the smallest breakpoint (the default font setting)
        @if (index(map-keys($settings), $breakpoint) == 1) {
          padding-top: $tuck-push * 1px;
          margin-bottom: - $tuck-pull * 1px;
        } @else {
          @include breakpoint(#{$breakpoint}) {
            padding-top: $tuck-push * 1px;
            margin-bottom: - $tuck-pull * 1px;
          }
        }
      } @else {
        @warn "Setting font info to unknown breakpoint: `#{$breakpoint}`";
      }
    }
  } @else {
    @warn "No font settings specified.";
  }
}

/*
  @mixin font_smoothing

  Set font smoothing ON or OFF
*/
@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}


/*
  @mixin text-underline

  Does "medium" style underlines with "iOS" style descender shadows

  Parameters:
  $underline - color
  $background - color
  $pos - vertical position
*/
@mixin text-underline($pos: 1em, $underline: $color__link--hover, $background: $color__background) {
  background: {
    image: linear-gradient(to bottom, rgba($underline, 0) 50%, rgba($underline, 1) 50%);
    repeat: repeat-x;
    size: 2px 2px;
    position: 0 $pos;
  }
  padding-bottom: 5px;
  margin-bottom: -5px;
  text-decoration: none;
  text-shadow: 0 .08em 0 $background, 0 -.08em 0 $background, .08em 0 0 $background, -.08em 0 0 $background;

  .s-print & {
    text-decoration: underline;
    text-shadow: none;
  }
}



/*
  @mixin hide_text

  Hides text in an element
*/

@mixin hide-text() {
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
  overflow: hidden;
  text-indent: -100%;
}



/*
  @mixin tucked-margin-top

  Intelligently applies baseline to baseline spacing to a text block:

  ```
  @include tucked-margin-top($f-h1, ('xsmall': 40, 'medium+': 60));
  ```

  Uses the `$f-h1` object from setup/_typography.scss and loops through the breakpoints, adding new margin top if required by specified margin tops and font size/line-height changes.

  'xsmall' is the default for all breakpoints and the successively overridden as breakpoints get larger.

  Its intelligent in that if you specify just the `xsmall` value, but the font size and/or line-height for this font object changes at some breakpoint, the mixin will add a breakpoint rule to adjust to maintain the consistent baseline-to-baseline spacing.

  So:

  ```
  $f-body: generate-font-obj(
    (
      font-family: $sans-serif-font,
      font-family-loaded: $sans-serif-font--loaded,
      font-loaded-class: $sans-serif-font-loaded-class,
      settings: (
        'small+': ( font-size: 16, line-height: 20, font-weight: 300, push: 1),
       )
    )
  );
  @include tucked-margin-top($f-body, ('xsmall': 40, 'medium+': 60));
  ```

  Generates a margin-top as a default (xsmall+) and a breakpoint for `medium+`.

  ```
  $f-body: generate-font-obj(
    (
      font-family: $sans-serif-font,
      font-family-loaded: $sans-serif-font--loaded,
      font-loaded-class: $sans-serif-font-loaded-class,
      settings: (
        'small+': ( font-size: 16, line-height: 20, push: 1),
        'medium+': ( font-size: 18, line-height: 25, push: 0),
       )
    )
  );
  @include tucked-margin-top($f-body, ('xsmall': 40));
  ```

  Similarly, this will produce a margin-top as a default and a breakpoint for `medium+`.

  If you need some margin-top for a singular breakpoint margin:

  ```
  @include tucked-margin-top($f-h1, null, 'large');
  ```

  Will produce a margin-top within a breakpoint of 'large'.

*/

@mixin tucked-margin-top($font-obj, $distances, $single-bp: false) {
  $settings: false;
  $line-height: 0;
  $margin: 0;
  $push: 0;
  $tuck-push: 0;
  $tuck-pull: 0;
  $new-line-height: 0;
  $new-margin: false;
  $new-push: 0;
  $new-tuck-push: 0;
  $new-tuck-pull: 0;
  @if $font-obj {
    $settings: map-get($font-obj, settings);
  }
  @if $settings {
    @each $name, $point in $breakpoints-with-directions {
      // first see if font settings has a line height for this breakpoint
      @if map-has-key($settings, $name) {
        $settings-at-breakpoint: map-get($settings, $name);
        @if map-has-key($settings-at-breakpoint, line-height) {
          $new-line-height: map-get($settings-at-breakpoint, line-height);
        }
        @if map-has-key($settings-at-breakpoint, push) {
          $new-push: map-get($settings-at-breakpoint, push);
        }
        @if map-has-key($settings-at-breakpoint, tuck-push) {
          $new-tuck-push: map-get($settings-at-breakpoint, tuck-push);
        }
        @if map-has-key($settings-at-breakpoint, tuck-pull) {
          $new-tuck-pull: map-get($settings-at-breakpoint, tuck-pull);
        }
      }
      // now see if a margin was specified for this breakpoint
      @if map-has-key($distances, $name) {
        $new-margin: map-get($distances, $name);
      }
      // now set the margin top
      @if $new-margin and ($new-margin != $margin or $new-line-height != $line-height or $new-tuck-push != $tuck-push or $new-tuck-pull != $tuck-pull) {
        $line-height: $new-line-height;
        $margin: $new-margin;
        $tuck-push: $new-tuck-push;
        $tuck-pull: $new-tuck-pull;
        @if ($name == 'xsmall' or $single-bp == $name) {
          margin-top: #{$margin - $line-height + $tuck-pull - $tuck-push}px;
        } @else {
          @include breakpoint(#{$name}) {
            margin-top: #{$margin - $line-height + $tuck-pull - $tuck-push}px;
          }
        }
      }
    }
  }
}

/*
  @mixin tucked-align-top

  Intelligently aligns an text element to the top of an element.

  ```
  @include tucked-align-top($f-h1);
  ```

  Uses the `$f-h1` object from setup/_typography.scss and loops through the breakpoints, adding new margin top if required by specified margin tops and font size/line-height changes.

  Sister mixin to '@mixin tucked-margin-top'

  tucked-align-top is useful for those situations where you want to horizontally align the top of an image and the top of some text.

  If you need some align top for a singular breakpoint margin:

  ```
  @include tucked-align-top($f-h1, 'large');
  ```

  Will produce a margin-top within a breakpoint of 'large'.

  It should be noted that this mixin is very dependent of the font itself. If the box the letters sit in, in the font, is weirdly spaced, then this mixin will struggle.

  There are 5 modes to try and you may want to add others for your particular font..

  ```
  @include tucked-align-top($f-h1, null, 2); // mode based on pull value
  @include tucked-align-top($f-h1, null, 3); // mode based on push value
  @include tucked-align-top($f-h1, null, 4); // mode based on baseline value
  @include tucked-align-top($f-h1, null, 5); // mode based on 0's
  ```
*/

@mixin tucked-align-top($font-obj, $single-bp: false, $mode: 1) {
  $settings: false;
  $line-height: 0;
  $push: 0;
  $tuck-push: 0;
  $tuck-pull: 0;
  $new-line-height: 0;
  $new-push: 0;
  $new-tuck-push: 0;
  $new-tuck-pull: 0;
  @if $font-obj {
    $settings: map-get($font-obj, settings);
  }
  @if $settings {
    @each $name, $point in $breakpoints-with-directions {
      // first see if font settings has a line height for this breakpoint
      @if map-has-key($settings, $name) {
        $settings-at-breakpoint: map-get($settings, $name);
        @if map-has-key($settings-at-breakpoint, line-height) {
          $new-line-height: map-get($settings-at-breakpoint, line-height);
        }
        @if map-has-key($settings-at-breakpoint, push) {
          $new-push: map-get($settings-at-breakpoint, push);
        }
        @if map-has-key($settings-at-breakpoint, tuck-push) {
          $new-tuck-push: map-get($settings-at-breakpoint, tuck-push);
        }
        @if map-has-key($settings-at-breakpoint, tuck-pull) {
          $new-tuck-pull: map-get($settings-at-breakpoint, tuck-pull);
        }
      }
      // now set the margin top
      @if ($new-line-height != $line-height or $new-tuck-push != $tuck-push or $new-tuck-pull != $tuck-pull) {
        $line-height: $new-line-height;
        $tuck-push: $new-tuck-push;
        $tuck-pull: $new-tuck-pull;
        $margin: 0;
        // original method - works with the pull, which is based on cap height and line height - seems to fail for fonts that sit strangely in their box
        @if ($mode == 0 or $mode == 1) {
          $base-height-into-pull: round($tuck-pull / $base-height); // round or floor? erm
          // round will be closer but has the risk of drawing too much negative margin
          $margin: 0 - ($base-height-into-pull * $base-height);
        }
        // alternative method
        @if ($mode == 2) {
          $margin: 0 - (($base-height - $tuck-pull) + $tuck-pull);
        }
        // alternative method
        @if ($mode == 3) {
          $margin: 0 - (($base-height - $tuck-push) + $tuck-push);
        }
        // alternative method
        @if ($mode == 4) {
          $margin: 0 - $base-height;
        }
        // alternative method
        @if ($mode == 5) {
          $margin: 0;
        }

        @if ($name == 'xsmall' or $single-bp == $name) {
          margin-top: #{$margin}px;
        } @else {
          @include breakpoint(#{$name}) {
            margin-top: #{$margin}px;
          }
        }
      }
    }
  }
}
